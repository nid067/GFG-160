class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/

class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        ArrayList<Integer> res = new ArrayList();
        if(node.left !=null || node.right != null) {
            res.add(node.data);
        }
        leftNodes(node.left,res);
        addLeaves(node,res);
        rightRevNodes(node.right,res);
        
        return res;
    }
    
    void leftNodes(Node node,ArrayList<Integer> res) {
        if(node == null) 
            return;
        if(node.left != null) {
            res.add(node.data);
            leftNodes(node.left,res);
        }else if(node.right != null) {
            res.add(node.data);
            leftNodes(node.right,res);
        }
    }
    
    void addLeaves(Node node,ArrayList<Integer> res) {
        if(node == null)
          return;
        addLeaves(node.left,res);
        if(node.left == null && node.right==null) {
             res.add(node.data);
        }
        addLeaves(node.right,res);
    }
    
    void rightRevNodes(Node node,ArrayList<Integer> res) {
        if(node == null) 
            return;
        if(node.right != null) {
            rightRevNodes(node.right,res);
            res.add(node.data);
        } else if(node.left != null) {
            rightRevNodes(node.left,res);
            res.add(node.data);
        }
         
    }
}
